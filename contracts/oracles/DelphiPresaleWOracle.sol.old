pragma solidity ^0.4.8;
//import './Ticker.sol'; 
//import 'node_modules/zeppelin-solidity/contracts/math/SafeMath.sol';

contract DelphiPresale {
    uint avaliableTokens = 250000000; //25%
    uint usCentsPerToken = 15;
    mapping(address=>bool) whitelist;
    address creator;
   // Ticker ticker;  


  function DelphiPresale(){
        creator = msg.sender;
        //ticker = Ticker(addr); 

    }
    
   modifier onlyCreator(){
        if(msg.sender != creator)
        throw;
        _;
        
   }    
   
   modifier inWhitelist(){
        require(whitelist[msg.sender] != false);
        _;
    }
    
   function whitelistAddress(address addr) onlyCreator{
        whitelist[addr] = true;
    }

//    function getRate() returns(uint256 rate){
//         return ticker.getRate(); 
//    }
    
   function issuePresale() payable inWhitelist{
       
        //msg.value
        // var ethSent = msg.value;
        // var conversionRate = APIGetRate();8 // Returns price for 1 ETH in us cents
        // var tokensPerEth = conversionRate / usCentsPerToken;
        // var tokensIssued = ethSent / tokensPerEth; (ignore remainder)
        // issueTokens();
    }
    
   /*
    function issueTokens() {
        
   }
    */
}